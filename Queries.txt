1. Create the Database:
  CREATE DATABASE ecommerce;
  USE ecommerce;

2. Create Customer Tables:
    CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    address VARCHAR(255)
);

3. Create Order Tables:
    CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

4. Create Product Tables:
     CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10,2),
    description TEXT
);
 INSERT SAMPLE DATA:
 1. Insert into customers:
       INSERT INTO customers (name, email, address)
         VALUES
        ('Alice', 'alice@example.com', '123 Main St'),
        ('Bob', 'bob@example.com', '456 Oak Ave'),
        ('Charlie', 'charlie@example.com', '789 Pine Rd');

 2. Insert into products:
       INSERT INTO products (name, price, description)
       VALUES
       ('Product A', 25.00, 'Product A Description'),
       ('Product B', 35.00, 'Product B Description'),
       ('Product C', 40.00, 'Product C Description');

 3. Insert into Orders:
       INSERT INTO orders (customer_id, order_date, total_amount)
       VALUES
       (1, CURDATE(), 100.00),
       (2, CURDATE() - INTERVAL 10 DAY, 200.00),
       (1, CURDATE() - INTERVAL 40 DAY, 150.00);

QUERIES TO WRITE:

1. Retrieve all customers who have placed an order in the last 30 days.
  => SELECT DISTINCT c.*
     FROM customers c
     JOIN orders o ON c.id = o.customer_id
     WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

2. Get the total amount of all orders placed by each customer.
  => SELECT c.name, SUM(o.total_amount) AS total_spent
     FROM customers c
     JOIN orders o ON c.id = o.customer_id
     GROUP BY c.id;

3. Update the price of Product C to 45.00.
   => UPDATE products
      SET price = 45.00
      WHERE name = 'Product C';

4. Add a new column discount to the products table.
   => ALTER TABLE products
      ADD COLUMN discount DECIMAL(5,2) DEFAULT 0.00;

5. Retrieve the top 3 products with the highest price.
    => SELECT * FROM products
       ORDER BY price DESC
       LIMIT 3;

Normalization : create order_items tables:
     CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

Insert into order_items:
    INSERT INTO order_items (order_id, product_id, quantity)
    VALUES
    (1, 1, 2),  --> Alice ordered 2 of Product A
    (2, 2, 1),  --> Bob ordered 1 of Product B
    (3, 3, 3);  --> Alice ordered 3 of Product C

6. Get the names of customers who have ordered Product A.
    => SELECT DISTINCT c.name
       FROM customers c
       JOIN orders o ON c.id = o.customer_id
       JOIN order_items oi ON o.id = oi.order_id
       JOIN products p ON oi.product_id = p.id
       WHERE p.name = 'Product A';
7. Join the orders and customers tables to retrieve the customer's name and order date for each order. 
    => SELECT c.name, o.order_date
       FROM orders o
       JOIN customers c ON o.customer_id = c.id;

8. Retrieve the orders with a total amount greater than 150.00.
    => SELECT * FROM orders
       WHERE total_amount > 150.00;

9. Retrieve the average total of all orders.
     => SELECT AVG(total_amount) AS average_order
        FROM orders;

















